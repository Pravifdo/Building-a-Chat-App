// ---------------------- IMPORTS ----------------------

// Express framework import ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è (Node.js web server build ‡∂ö‡∂ª‡∂±‡∑ä‡∂±)
import express from "express";

// Socket.io server import ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è (Real-time communication ‡∑É‡∂≥‡∑Ñ‡∑è)
import { Server } from "socket.io";

// File path handle ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫ imports
import path from "path";
import { fileURLToPath } from "url";

// ---------------------- PATH SETUP ----------------------

// __filename ‡∑É‡∑Ñ __dirname ES Modules ‡∑Ä‡∂Ω default ‡∂±‡∑ê‡∂≠‡∑í ‡∂±‡∑í‡∑É‡∑è
// ‡∂í‡∑Ä‡∑è manual ‡∂Ω‡∑ô‡∑É ‡∑Ñ‡∂Ø‡∑è‡∂ú‡∂±‡∑ä‡∂±‡∑Ä‡∑è
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ---------------------- PORT ----------------------

// Server ‡∂ë‡∂ö run ‡∑Ä‡∑ô‡∂±‡∑ä‡∂± PORT ‡∂ë‡∂ö set ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
// Environment variable PORT ‡∂≠‡∑í‡∂∂‡∑î‡∂±‡∑ú‡∂≠‡∑ä ‡∂í‡∂ö use ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
// ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä default = 3500
const PORT = process.env.PORT || 3500;

// ---------------------- EXPRESS APP ----------------------

// Express app ‡∂ë‡∂ö create ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
const app = express();

// "public" folder ‡∂ë‡∂ö static files serve ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è (HTML, CSS, JS)
app.use(express.static(path.join(__dirname, "public")));

// Express server ‡∂ë‡∂ö start ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
const expressServer = app.listen(PORT, () => {
  console.log(`üöÄ HTTP server running on port ${PORT}`);
});

// ---------------------- SOCKET.IO SERVER ----------------------

// Socket.IO server ‡∂ë‡∂ö Express server ‡∂ë‡∂ö‡∂ß attach ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è
const io = new Server(expressServer, {
  cors: {
    // Production ‡∂ë‡∂ö‡∑ö‡∂Ø‡∑í origins allow ‡∂ö‡∂ª‡∂±‡∑ä‡∂±‡∑ô ‡∂±‡∑ë
    origin: process.env.NODE_ENV === "production"
      ? false
      // Development ‡∂ë‡∂ö‡∑ö‡∂Ø‡∑í localhost ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä connect ‡∑Ä‡∑ô‡∂±‡∑ä‡∂± ‡∂â‡∂© ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±
      : ["http://localhost:5500", "http://127.0.0.1:5500"],
  },
});

// ---------------------- SOCKET.IO EVENTS ----------------------

// üü¢ Client ‡∂ë‡∂ö connect ‡∂ã‡∂±‡∑ú‡∂≠‡∑ä
io.on("connection", (socket) => {
  console.log(`‚úÖ User ${socket.id} connected`);

  // üü¢ Welcome message ‡∂ë‡∂ö ‡∂±‡∑Ä client ‡∂ë‡∂ö‡∂ß‡∂∏ ‡∂∫‡∑Ä‡∂∫‡∑í
  socket.emit("message", "Welcome to the chat!");

  // üü¢ ‡∂Ö‡∂Ω‡∑î‡∂≠‡∑ä user ‡∂ë‡∂ö join ‡∂ã‡∂± ‡∂∂‡∑Ä connected ‡∑Ä‡∑ô‡∂± ‡∂Ö‡∂±‡∑í‡∂≠‡∑ä clients ‡∂ß ‡∂ö‡∑í‡∂∫‡∂±‡∑Ä‡∑è
  socket.broadcast.emit(
    "message",
    `User ${socket.id.substring(0, 5)} has joined the chat`
  );

  // üü¢ Client ‡∂ë‡∂ö "activity" emit ‡∂ö‡∂Ω‡∑ú‡∂≠‡∑ä (typing indicator)
  socket.on("activity", (data) => {
    console.log("üü¢ User is typing:", data);

    // ‡∂Ö‡∂±‡∑í‡∂≠‡∑ä clients ‡∂ß "user is typing..." ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è ‡∂ö‡∑í‡∂∫‡∂±‡∑Ä‡∑è
    socket.broadcast.emit("activity", `${socket.id.substring(0, 5)} is typing...`);
  });

  // üü¢ Client ‡∂ë‡∂ö "message" emit ‡∂ö‡∂Ω‡∑ú‡∂≠‡∑ä
  socket.on("message", (data) => {
    console.log("üì© From client:", data);

    // ‡∑É‡∑í‡∂∫‡∂Ω‡∑î‡∂∏ connected clients ‡∂ß message ‡∂ë‡∂ö ‡∂∫‡∑Ä‡∂∫‡∑í
    io.emit("message", data);
  });

  // üü¢ Client ‡∂ë‡∂ö disconnect ‡∂ã‡∂±‡∑ú‡∂≠‡∑ä
  socket.on("disconnect", () => {
    console.log(`‚ùå User ${socket.id} disconnected`);

    // ‡∂Ö‡∂±‡∑í‡∂≠‡∑ä clients ‡∂ß ‡∂ö‡∑í‡∂∫‡∂±‡∑Ä‡∑è user ‡∂ë‡∂ö left ‡∑Ä‡∑î‡∂±‡∑è ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è
    socket.broadcast.emit(
      "message",
      `User ${socket.id.substring(0, 5)} has left the chat`
    );
  });
});
